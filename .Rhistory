#Productivity
modelName = "Grass1_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d1_P <- fx_cforest(model,modelName,fileName)
d1_P[d1_P == "abmi"] <- "monoBiomass"
d1_P[d1_P == "r_pNi"] <- "NUE1" #"N use efficiency"
### Grass2 (Lindsay's model)
if(SAVE_CACHE){model <- fx_read_model("readLindsay.R","Grass2")
}else{}
#Biomass
modelName = "Grass2"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Grass2_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_P <- fx_cforest(model,modelName,fileName)
### Grass2 (Lindsay's model) - variable
if(SAVE_CACHE){model <- fx_read_model("readLindsay_variable.R","Grass2")
}else{}
#Biomass
modelName = "Grass2_v"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_v <- fx_cforest(model,modelName,fileName)
d2_v[d2_v == "thetai"] <- "NUE2" #"N uptake rate"
d2_v[d2_v == "Vi"] <- "rootingVolume"
#Productivity
modelName = "Grass2_v_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_v_P <- fx_cforest(model,modelName,fileName)
d2_v_P[d2_v_P == "thetai"] <- "NUE2" #"N uptake rate"
d2_v_P[d2_v_P == "Vi"] <- "rootingVolume"
### Grass3 (IBC-grass)
if(SAVE_CACHE){model <- fx_read_model("readIBC.R","Grass3")
#model <- fx_read_model("readIBC.R","IBC_grass.noNDD")
}else{}
#Biomass
modelName = "Grass3"
#modelName = "Grass3_noNDD"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Grass3_P"
#modelName = "Grass3_P_noNDD"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_P <- fx_cforest(model,modelName,fileName)
#READ_CACHE <- FALSE
#SAVE_CACHE <- TRUE
### Grass3 (IBC-grass) PCA - 3 components
if(SAVE_CACHE){model <- readRDS(paste0(tmp_dir,"/PCA/Grass3_PCAcoord.Rda")) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Productivity, Biomass, PC1score, PC2score, PC3score) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
mutate(Biomass = scales::rescale(Biomass, to = c(0, 100))) %>%
mutate(Productivity = scales::rescale(Productivity, to = c(0, 100)))
}else{}
#Biomass
modelName = "Grass3_PCA3"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_3 <- fx_cforest(model,modelName,fileName)
d3_3[d3_3 == "PC1score"] <- "LES1" #"leaf eco. spectrum"
d3_3[d3_3 == "PC2score"] <- "Size/Growth"
d3_3[d3_3 == "PC3score"] <- "Spacing"
#Productivity
modelName = "Grass3_PCA3_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_3_P <- fx_cforest(model,modelName,fileName)
d3_3_P[d3_3_P == "PC1score"] <- "LES1" #"leaf eco. spectrum"
d3_3_P[d3_3_P == "PC2score"] <- "Size/Growth"
d3_3_P[d3_3_P == "PC3score"] <- "Spacing"
### Forest1 (PPA)
if(SAVE_CACHE){model <- fx_read_model("readPPA.R","Forest1")
}else{}
#Biomass
modelName = "Forest1"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d4 <- fx_cforest(model,modelName,fileName)
d4[d4 == "PC1score"] <- "paceOfLife"
d4[d4 == "PC2score"] <- "MaxHeight"
#Productivity
modelName = "Forest1_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d4_P <- fx_cforest(model,modelName,fileName)
d4_P[d4_P == "PC1score"] <- "paceOfLife"
d4_P[d4_P == "PC2score"] <- "MaxHeight"
### Forest2 (TROLL)
if(SAVE_CACHE){model <- fx_read_model("readTROLL.R","Forest2")
}else{}
#Biomass
modelName = "Forest2"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Forest2_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5_P <- fx_cforest(model,modelName,fileName)
### Forest2 (TROLL) PCA - 3 components
if(SAVE_CACHE){model <- readRDS(paste0(tmp_dir,"/PCA/Forest2_PCAcoord.Rda")) %>%
select(c(Rep, Ninitial, SpeciesID, Year, Stage, Productivity, Biomass, PC1score, PC2score, PC3score)) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
mutate(Biomass = scales::rescale(Biomass, to = c(0, 100))) %>%
mutate(Productivity = scales::rescale(Productivity, to = c(0, 100)))
}else{}
#Biomass
modelName = "Forest2_hrealmax_PCA"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5h_3 <- fx_cforest(model,modelName,fileName)
d5h_3[d5h_3 == "PC1score"] <- "LES2" #"Leaf res. conserv."
d5h_3[d5h_3 == "PC2score"] <- "MaxHeight"
d5h_3[d5h_3 == "PC3score"] <- "woodDensity"
#### Making the plot with all four of the conditions ####
function.data.prep<-function.data.sub%>%
select(-c(std_decomposition_specific, std_phosphatase, std_drought_resistance, std_n_mineralization, std_potential_nitrification))
# Chunk 1: reading in data and packages
library(tidyverse) #for data wrangling
library(FD) #for calculations of functional diversity (not used, I think)
library(snakecase) #for changing over names to standardized case (not used anymore, I think)
library(vegan) #for PCA functions
library(pracma)
library(GPArotation) #for rotations of PCA data
library(reshape2) #for data wrangling
library(readr) #for reading in zip files
library(gt) #for making pretty tables
library(cowplot) #for making multiplots
library(patchwork)
library(emmeans)
library(ggeffects)
library(ggh4x)
library(car)
library(heplots)
source("./Code/Functions.R")
library(ggplot2)
data<-read.csv("./R/Ceballos-Nunez.et.al-DataForPredictionPlot.csv")
names(data)
data<-read.csv("./R/Ceballos-Nunez.et.al-DataForPredictionPlot.csv")
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
)
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Strong.Weak~Monoculture.Mixture)+
theme_bw() +
theme_classic() +
theme(aspect.ratio = 0.5,text = element_text(size = 30))
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Strong.Weak~Monoculture.Mixture)+
geom_bar()+
theme_bw() +
theme_classic() +
theme(aspect.ratio = 0.5,text = element_text(size = 30))
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Strong.Weak~Monoculture.Mixture)+
geom_bar(stat="identity")+
theme_bw() +
theme_classic() +
theme(aspect.ratio = 0.5,text = element_text(size = 30))
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Strong.Weak~Monoculture.Mixture)+
geom_bar(stat="identity")+
theme_classic() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Strong.Weak~Monoculture.Mixture)+
geom_bar(stat="identity")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
library(forcats)
?fct_reorder
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(desc(Monoculture.Mixture)~Strong.Weak)+
geom_bar(stat="identity")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
?fct_reorder
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(fct_reorder(Monoculture.Mixture, Monoculture.Mixture, desc=T)~Strong.Weak)+
geom_bar(stat="identity")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
data$Monoculture.Mixture<-factor(data$Monoculture.Mixture, levels=c("Monoculture", "Mixture"))
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none",
axis.title.y = element_text(angle = 0))
pred.plot
names(data)
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", aes(fill=Trait.type))+
scale_fill_manual(values=c(red, blue), guide="none")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
red <- "#e41a1cff"
blue <- "#377eb8ff"
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", aes(fill=Trait.type))+
scale_fill_manual(values=c(red, blue), guide="none")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", aes(fill=Trait.Type))+
scale_fill_manual(values=c(red, blue), guide="none")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", color="black", aes(fill=Trait.Type))+
scale_fill_manual(values=c(red, blue), guide="none")+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", color="black", aes(fill=Trait.Type))+
scale_fill_manual(values=c(red, blue), guide="none")+
ylim(0,1)+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
pred.plot
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", color="black", aes(fill=Trait.Type))+
scale_fill_manual(values=c(red, blue), guide="none")+
ylim(0,0.9)+
theme_bw() +
theme(text = element_text(size = 20),legend.position = "none")
pred.plot
ggsave("PredictionPlot-11.1.2022.png", dpi=300)
pred.plot<-ggplot(data, aes(x=Traits, y=Importance))+
facet_grid(Monoculture.Mixture~Strong.Weak)+
geom_bar(stat="identity", color="black", aes(fill=Trait.Type))+
scale_fill_manual(values=c(red, blue), guide="none")+
ylim(0,0.9)+
theme_bw() +
theme(text = element_text(size = 30),legend.position = "none")
pred.plot
ggsave("PredictionPlot-11.1.2022.png", dpi=300)
library(gridExtra)
set.seed(1987)
base_dir          <- setwd(".")
scripts_dir       <- paste0(base_dir, "/R")
tmp_dir           <- paste0(base_dir, "/tmp")
raw_data_dir      <- paste0(base_dir, "/data/raw")
source(paste0(scripts_dir, "/to_test/fx_cforest_party-KB.R"))
READ_CACHE <- FALSE
SAVE_CACHE <- TRUE
if(READ_CACHE){model <- c()}else{}
### Grass1 (Adam's model)
if(SAVE_CACHE){model <- fx_read_model("readAdam.R", "Grass1") %>%
mutate(r_pNi = 1/pNi) %>% #rpNi = reciprocal of pNi
select(-no3i,-pNi)
}else{}
#Biomass
modelName = "Grass1"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d1 <- fx_cforest(model,modelName,fileName)
d1[d1 == "abmi"] <- "monoBiomass"
d1[d1 == "r_pNi"] <- "NUE1" #"N use efficiency"
#Productivity
modelName = "Grass1_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d1_P <- fx_cforest(model,modelName,fileName)
d1_P[d1_P == "abmi"] <- "monoBiomass"
d1_P[d1_P == "r_pNi"] <- "NUE1" #"N use efficiency"
### Grass2 (Lindsay's model)
if(SAVE_CACHE){model <- fx_read_model("readLindsay.R","Grass2")
}else{}
#Biomass
modelName = "Grass2"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Grass2_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_P <- fx_cforest(model,modelName,fileName)
### Grass2 (Lindsay's model) - variable
if(SAVE_CACHE){model <- fx_read_model("readLindsay_variable.R","Grass2")
}else{}
#Biomass
modelName = "Grass2_v"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_v <- fx_cforest(model,modelName,fileName)
d2_v[d2_v == "thetai"] <- "NUE2" #"N uptake rate"
d2_v[d2_v == "Vi"] <- "rootingVolume"
#Productivity
modelName = "Grass2_v_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d2_v_P <- fx_cforest(model,modelName,fileName)
d2_v_P[d2_v_P == "thetai"] <- "NUE2" #"N uptake rate"
d2_v_P[d2_v_P == "Vi"] <- "rootingVolume"
### Grass3 (IBC-grass)
if(SAVE_CACHE){model <- fx_read_model("readIBC.R","Grass3")
#model <- fx_read_model("readIBC.R","IBC_grass.noNDD")
}else{}
#Biomass
modelName = "Grass3"
#modelName = "Grass3_noNDD"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Grass3_P"
#modelName = "Grass3_P_noNDD"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_P <- fx_cforest(model,modelName,fileName)
#READ_CACHE <- FALSE
#SAVE_CACHE <- TRUE
### Grass3 (IBC-grass) PCA - 3 components
if(SAVE_CACHE){model <- readRDS(paste0(tmp_dir,"/PCA/Grass3_PCAcoord.Rda")) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Productivity, Biomass, PC1score, PC2score, PC3score) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
mutate(Biomass = scales::rescale(Biomass, to = c(0, 100))) %>%
mutate(Productivity = scales::rescale(Productivity, to = c(0, 100)))
}else{}
#Biomass
modelName = "Grass3_PCA3"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_3 <- fx_cforest(model,modelName,fileName)
d3_3[d3_3 == "PC1score"] <- "LES1" #"leaf eco. spectrum"
d3_3[d3_3 == "PC2score"] <- "Size/Growth"
d3_3[d3_3 == "PC3score"] <- "Spacing"
#Productivity
modelName = "Grass3_PCA3_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d3_3_P <- fx_cforest(model,modelName,fileName)
d3_3_P[d3_3_P == "PC1score"] <- "LES1" #"leaf eco. spectrum"
d3_3_P[d3_3_P == "PC2score"] <- "Size/Growth"
d3_3_P[d3_3_P == "PC3score"] <- "Spacing"
### Forest1 (PPA)
if(SAVE_CACHE){model <- fx_read_model("readPPA.R","Forest1")
}else{}
#Biomass
modelName = "Forest1"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d4 <- fx_cforest(model,modelName,fileName)
d4[d4 == "PC1score"] <- "paceOfLife"
d4[d4 == "PC2score"] <- "MaxHeight"
#Productivity
modelName = "Forest1_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d4_P <- fx_cforest(model,modelName,fileName)
d4_P[d4_P == "PC1score"] <- "paceOfLife"
d4_P[d4_P == "PC2score"] <- "MaxHeight"
### Forest2 (TROLL)
if(SAVE_CACHE){model <- fx_read_model("readTROLL.R","Forest2")
}else{}
#Biomass
modelName = "Forest2"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5 <- fx_cforest(model,modelName,fileName)
#Productivity
modelName = "Forest2_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5_P <- fx_cforest(model,modelName,fileName)
### Forest2 (TROLL) PCA - 3 components
if(SAVE_CACHE){model <- readRDS(paste0(tmp_dir,"/PCA/Forest2_PCAcoord.Rda")) %>%
select(c(Rep, Ninitial, SpeciesID, Year, Stage, Productivity, Biomass, PC1score, PC2score, PC3score)) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
mutate(Biomass = scales::rescale(Biomass, to = c(0, 100))) %>%
mutate(Productivity = scales::rescale(Productivity, to = c(0, 100)))
}else{}
### Dryland (Bjoern)
if(SAVE_CACHE){model <- fx_read_model("readBjoern.R","bjoern") %>%
select(-pRoot)
}else{}
#Biomass
modelName = "Dryland"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d6 <- fx_cforest(model,modelName,fileName)
d6[d6 == "maxSize"] <- "maxBiomass"
d6[d6 == "pLeaf"] <- "leafAllocation"
d6[d6 == "pStorage"] <- "storageAllocation"
#Productivity
modelName = "Dryland_P"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d6_P <- fx_cforest(model,modelName,fileName)
d6_P[d6_P == "maxSize"] <- "maxBiomass"
d6_P[d6_P == "pLeaf"] <- "leafAllocation"
d6_P[d6_P == "pStorage"] <- "storageAllocation"
# All models
#Biomass
resvar = "Biomass"
pN1 = "cforest_grid"
pN2 = "cforest_grid_meta"
pN3 = "cforest_grid_2PC"
pN4 = "cforest_grid_meta_2PC"
pN5 = "cforest_grid_3PC"
pN6 = "cforest_grid_meta_3PC"
all_d <- rbind(d1,d2,d3,d4,d5h,d6)
#Biomass
modelName = "Forest2_hrealmax_PCA"
fileName = paste0(tmp_dir,"/randomForest/",modelName,".Rda")
d5h_3 <- fx_cforest(model,modelName,fileName)
d5h_3[d5h_3 == "PC1score"] <- "LES2" #"Leaf res. conserv."
d5h_3[d5h_3 == "PC2score"] <- "MaxHeight"
d5h_3[d5h_3 == "PC3score"] <- "woodDensity"
# Difference plots Biomass
d1 <- fx_diff_v2(d1)
d2_v <- fx_diff_v2(d2_v)
d3_3 <- fx_diff_v2(d3_3)
d4 <- fx_diff_v2(d4)
d5h_3<- fx_diff_v2(d5h_3)
d6 <- fx_diff_v2(d6)
df <- rbind(d1,d2_v,d4,d5h_3,d6)
#df <- rbind(d1,d2_v,d3_3,d4,d5h_3,d6)
df<-df%>%
filter(type=="Size related")
plotName <- 'Diff_import'
fx_plot_diff_mono_mix_smooth(plotName,df)
fx_plot_diff_mono_mix <- function(plotName,df){
# Plot product of mono and mixture % of biomass or productivity variance explained per trait type
print('Difffffff')
print(head(df))
#	df <- df %>%
#		mutate(sCPI = abs(sCPI))
print(head(df))
is_productivity = grepl("_P$",plotName)
response <- if(is_productivity){"Productivity"}else{"Biomass"}
df_stat_smooth <- subset(df,type!="Resource related" | mName!="Dryland")
print(df_stat_smooth)
xlab <- 'Function-dominance correlation'
ylab <- expression(sqrt("Monoculture VE * Mixture VE"))
p1 <- ggplot(df,
aes(x = if(is_productivity){funcdom_p}else{funcdom},
y = sCPI, label = mName)) + #size=3
#color = type)) +
geom_text_repel(color="black",
guide="none") +
#guides(size="none", fill="none") +
labs(shape = "Model", x = xlab, y = ylab) +
#stat_regline_equation(label.x = c(0.25,0.55), label.y = c(1,1),aes(label =  ..adj.rr.label..)) +
stat_regline_equation(data = df_stat_smooth, label.x = 0.1, label.y = 0.9, show.legend=FALSE,
aes(label =  ..adj.rr.label..), color=blue, fill=blue) +
geom_point(color="black", shape=21, fill=blue) +
scale_color_manual(values=blue) +
scale_fill_manual(values=blue, guide="none")+
#geom_hline(yintercept=0, linetype='dotted') +
theme_bw() +
theme_classic() +
theme(text = element_text(size = 14), legend.position = "top", legend.direction = "horizontal")
filename <- paste0(plotName,".png")
#filename <- paste0(plotName,".pdf")
path <- paste0(tmp_dir,"/randomForest/")
ggsave(filename = filename, path = path, plot = p1
,height = 13, width = 15, units = "cm")
return(p1)
}
fx_plot_diff_mono_mix_smooth(plotName,df)
df
fx_plot_diff_mono_mix <- function(plotName,df){
# Plot product of mono and mixture % of biomass or productivity variance explained per trait type
print('Difffffff')
print(head(df))
#	df <- df %>%
#		mutate(sCPI = abs(sCPI))
print(head(df))
is_productivity = grepl("_P$",plotName)
response <- if(is_productivity){"Productivity"}else{"Biomass"}
df_stat_smooth <- df
print(df_stat_smooth)
xlab <- 'Function-dominance correlation'
ylab <- expression(sqrt("Monoculture VE * Mixture VE"))
p1 <- ggplot(df,
aes(x = if(is_productivity){funcdom_p}else{funcdom},
y = sCPI, label = mName)) + #size=3
#color = type)) +
geom_text_repel(color="black",
guide="none") +
#guides(size="none", fill="none") +
labs(shape = "Model", x = xlab, y = ylab) +
#stat_regline_equation(label.x = c(0.25,0.55), label.y = c(1,1),aes(label =  ..adj.rr.label..)) +
stat_regline_equation(data = df_stat_smooth, label.x = 0.1, label.y = 0.9, show.legend=FALSE,
aes(label =  ..adj.rr.label..), color=blue, fill=blue) +
geom_point(color="black", shape=21, fill=blue) +
scale_color_manual(values=blue) +
scale_fill_manual(values=blue, guide="none")+
#geom_hline(yintercept=0, linetype='dotted') +
theme_bw() +
theme_classic() +
theme(text = element_text(size = 14), legend.position = "top", legend.direction = "horizontal")
filename <- paste0(plotName,".png")
#filename <- paste0(plotName,".pdf")
path <- paste0(tmp_dir,"/randomForest/")
ggsave(filename = filename, path = path, plot = p1
,height = 13, width = 15, units = "cm")
return(p1)
}
fx_plot_diff_mono_mix_smooth(plotName,df)
