fig.width = 8,
size = "small")
library(data.table)
library(tidyverse)
library(ggthemes)
library(gganimate)
library(viridis)
library(cowplot)
library(scales)
library(plotly)
library(randomForest)
library(pdp)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); setwd("../")
base_dir          <- getwd()
scripts_dir       <- paste0(base_dir, "/R")
raw_data_dir      <- paste0(base_dir, "/data/raw")
source(paste0(scripts_dir, "/readModels.R"))
meta = seq(80, 100)
iso = seq(180, 200)
randomForest_4conditions <- function(modelName,model,NoSpp,stage){
model.NoSpp <- model %>%
filter(Ninitial == NoSpp,
Year %in% stage) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
select(-SpeciesID, -Ninitial, -Stage, -Rep)
train <- model.NoSpp %>% sample_frac(.70)
test <- anti_join(model.NoSpp, train, by = 'id')
train <- train %>% select(-id)
test <- test %>% select(-id)
rf.NoSpp <- randomForest(data = as.data.frame(train),
Biomass ~ .,
importance = TRUE)
pred <- data.frame(pred = predict(rf.NoSpp, test))
title = paste("correlation: ", round(cor(pred, test$Biomass)[[1]], 2),
"  |  mean squared error: ", round(mean(rf.NoSpp$mse), 2),
"  |  R-squared: ", round(mean(rf.NoSpp$rsq), 2),
sep = "")
pdf(paste0(modelName,".pdf"))
varImpPlot(rf.NoSpp, main = title)
dev.off()
#return()
}
PPA <- models$Forest1 %>%
select(-Model, -SeedRain)
#F1C1 <- randomForest_4conditions(PPA,1,meta)
F1C3 <- randomForest_4conditions("F1C3",PPA,32,meta)
F1C1 <- randomForest_4conditions(PPA,1,meta)
F1C1 <- randomForest_4conditions("F1C1",PPA,1,meta)
F1C2 <- randomForest_4conditions("F1C2",PPA,1,iso)
F1C3 <- randomForest_4conditions("F1C3",PPA,32,meta)
F1C4 <- randomForest_4conditions("F1C4",PPA,32,iso)
options(width = 1000)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
#fig.height = 4,
#fig.width = 8,
size = "small")
library(data.table)
library(tidyverse)
library(ggthemes)
library(gganimate)
library(viridis)
library(cowplot)
library(scales)
library(plotly)
library(randomForest)
library(pdp)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); setwd("../")
base_dir          <- getwd()
scripts_dir       <- paste0(base_dir, "/R")
tmp_dir           <- paste0(base_dir, "/tmp")
raw_data_dir      <- paste0(base_dir, "/data/raw")
#source(paste0(scripts_dir, "/readModels.R"))
source(paste0(scripts_dir, "/readIBC.R"))
IBC_grass <- models$Grass3 %>%
select(-Productivity, -Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
IBC_grass_traits <- IBC_grass_traits %>%
mutate(SpeciesID = as.factor(SpeciesID))
#IBC_grass <- inner_join(IBC_grass, IBC_grass_traits, by = c("SpeciesID"))
IBC_grass <- inner_join(IBC_grass, IBC_grass_traits) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Biomass, LMR, MaxMass, Gmax, SLA, meanSpacerLength)
IBC_grass
library(data.table)
library(tidyverse)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)); setwd("../../")
base_dir          <- getwd()
raw_data_dir      <- paste0(base_dir, "/data/raw")
setwd(raw_data_dir)
load("adammod_trans_exp_out_HPC.rda")
adam <- datout %>%
mutate(Biomass = Productivity,
Model = "Grass1")
# Adam ran the 64 species simulation too many times
adam_64 <- adam %>%
filter(Ninitial == 64) %>%
group_by(Model, SeedRain, SpeciesID, Stage, Year) %>%
filter(Rep == first(Rep))
adam_not64 <- adam %>%
filter(Ninitial != 64)
adam <- bind_rows(adam_64, adam_not64) %>%
ungroup()
# Remove all species with inappreciable biomass
adam <- adam %>%
mutate(Biomass      = ifelse(Biomass < 1, 0, Biomass),
Productivity = ifelse(Productivity < 1, 0, Productivity))
adam_traits <- read.csv("adammod_trans_exp_speciesdata.csv")
rm(datout, adam_64, adam_not64)
meta = seq(80, 100)
iso = seq(180, 200)
randomForest_4conditions <- function(modelName,model,NoSpp,stage){
print(modelName)
model <- model %>%
filter(Ninitial == NoSpp,
Year %in% stage) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
select(-Productivity,-SpeciesID, -Ninitial, -Stage, -Rep)
train <- model %>% sample_frac(.70)
test <- anti_join(model, train, by = 'id')
train <- train %>% select(-id)
test <- test %>% select(-id)
rf <- randomForest(data = as.data.frame(train),
Biomass ~ .,
importance = TRUE)
pred <- data.frame(pred = predict(rf, test))
title = paste("correlation: ", round(cor(pred, test$Biomass)[[1]], 2),
"  |  mean squared error: ", round(mean(rf$mse), 2),
"  |  R-squared: ", round(mean(rf$rsq), 2),
sep = "")
pdf(paste0(tmp_dir,"/randomForest/",modelName,".pdf"))
varImpPlot(rf, main = title)
#dev.set(dev.next())
while (!is.null(dev.list()))  dev.off()
}
### Grass1 (Adam's model)
adam <- adam %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
adam <- adam %>%
select(-Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
adam_traits <- adam_traits %>%
mutate(SpeciesID = as.factor(SpeciesID))
adam <- inner_join(adam, adam_traits, by = c("SpeciesID"))
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
library(randomForest)
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
scripts_dir       <- paste0(base_dir, "/R")
tmp_dir           <- paste0(base_dir, "/tmp")
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
G1C1
#library(scales)
library(plotly)
library(pdp)
library(viridis)
library(cowplot)
#library(data.table)
#library(tidyverse)
library(ggthemes)
library(gganimate)
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
G1C1
randomForest_4conditions <- function(modelName,model,NoSpp,stage){
print(modelName)
model <- model %>%
filter(Ninitial == NoSpp,
Year %in% stage) %>%
mutate(id = row_number()) %>%
mutate_if(is.character, as.factor) %>%
select(-Productivity,-SpeciesID, -Ninitial, -Stage, -Rep)
train <- model %>% sample_frac(.70)
test <- anti_join(model, train, by = 'id')
train <- train %>% select(-id)
test <- test %>% select(-id)
rf <- randomForest(data = as.data.frame(train),
Biomass ~ .,
importance = TRUE)
pred <- data.frame(pred = predict(rf, test))
title = paste("correlation: ", round(cor(pred, test$Biomass)[[1]], 2),
"  |  mean squared error: ", round(mean(rf$mse), 2),
"  |  R-squared: ", round(mean(rf$rsq), 2),
sep = "")
pdf(paste0(tmp_dir,"/randomForest/",modelName,".pdf"))
varImpPlot(rf, main = title)
#dev.set(dev.next())
while (!is.null(dev.list()))  dev.off()
return(rf)
}
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
G1C1
load("lindsaymod_trans_exp_out_HPC.rda")
lindsay <- datout %>%
mutate(Biomass = Productivity,
Model = "Grass2")
# Adam ran the 64 species simulation too many times
lindsay_64 <- lindsay %>%
filter(Ninitial == 64) %>%
group_by(Model, SeedRain, SpeciesID, Stage, Year) %>%
filter(Rep == first(Rep))
lindsay_not64 <- lindsay %>%
filter(Ninitial != 64)
lindsay <- bind_rows(lindsay_64, lindsay_not64) %>%
ungroup()
lindsay_traits <- read.csv("lindsaymod_trans_exp_speciesdata.csv")
rm(datout, lindsay_64, lindsay_not64)
load("IBC-grass_Table1.rda")
IBC_grass <- d %>%
as_tibble() %>%
select(-SimID, -Stabilization) %>%
mutate(Productivity = Biomass)
IBC_grass.noNDD <- IBC_grass %>% filter(Model == "IBC_grass.noNDD")
IBC_grass.NDD <- IBC_grass %>% filter(Model == "IBC_grass.NDD") %>%
mutate(Model = "Grass3")
IBC_grass_traits <- read.csv("IBC-grass_Table2.csv")
remove_cols <- IBC_grass_traits %>%
map_dfr(var) %>%
gather() %>%
filter(value == 0) %>%
spread(key, value) %>%
names()
IBC_grass_traits <- IBC_grass_traits[, setdiff(names(IBC_grass_traits), remove_cols)]
rm(d, IBC_grass, remove_cols)
load("adammod_trans_exp_out_HPC.rda")
adam <- datout %>%
mutate(Biomass = Productivity,
Model = "Grass1")
# Adam ran the 64 species simulation too many times
adam_64 <- adam %>%
filter(Ninitial == 64) %>%
group_by(Model, SeedRain, SpeciesID, Stage, Year) %>%
filter(Rep == first(Rep))
adam_not64 <- adam %>%
filter(Ninitial != 64)
adam <- bind_rows(adam_64, adam_not64) %>%
ungroup()
# Remove all species with inappreciable biomass
adam <- adam %>%
mutate(Biomass      = ifelse(Biomass < 1, 0, Biomass),
Productivity = ifelse(Productivity < 1, 0, Productivity))
adam_traits <- read.csv("adammod_trans_exp_speciesdata.csv")
rm(datout, adam_64, adam_not64)
PPA <- readRDS("PPA_Table1.rds") %>%
filter(Year %in% seq(0, 2000, 10)) %>%
mutate(Year = Year / 10) %>%
select(-`F`, -N, -BasalArea)
PPA_traits <- fread("PPA_Table2.csv")
# PPA does not print species without biomass, so I include them by hand
PPA_initialCommunities <- fread("PPA_initialCommunities.csv")
PPA_initialCommunities <- PPA_initialCommunities %>%
expand_grid(SeedRain = unique(PPA$SeedRain), # I only ran scenarios with these levels of seed rain
Year = seq(1, 200)) %>%
mutate(Model = "PPA",
Stage = ifelse(Year > 100, "disassembly", "assembly"),
Biomass = 0,
Productivity = 0)
extirpated <- anti_join(PPA_initialCommunities, PPA,
by = c("Model", "Ninitial", "Rep", "SeedRain", "SpeciesID", "Stage", "Year"))
PPA <- bind_rows(PPA, extirpated) %>%
mutate(Model = "Forest1")
rm(PPA_initialCommunities, extirpated)
troll <- readRDS("TROLL_Table1.rds") %>%
select(-LineNumber) %>%
mutate(SpeciesID = as.factor(SpeciesID),
SpeciesID = as.numeric(SpeciesID)) %>%
mutate(Model = "Forest2")
troll_traits <- fread("TROLL_Table2.txt") %>%
rename(SpeciesID = species_binomial) %>%
mutate(SpeciesID = as.factor(SpeciesID),
SpeciesID = as.numeric(SpeciesID))
bjoern <- readRDS("bjoern_Table1_averaged_smooth_NAreplaced0.rds") %>%
select(-Productivity, -Smooth)# %>%
#    mutate(Model = "Dryland")
bjoern_traits <- readRDS("bjoern_Table2.rds") %>%
select(SpeciesID, maxSize, pLeaf, pRoot, pStorage)
bjoern <- bjoern %>%
filter(!is.na(Biomass)) %>%
filter(SeedRain %in% c(100))
bjoern <- bjoern %>%
mutate(Stage = recode(Stage,
assembly = "metacommunity",
disassembly = "isolation"))
bjoern <- bjoern %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
model_runs <- list(adam,
lindsay,
IBC_grass.NDD,
# IBC_grass.noNDD,
PPA,
troll,
bjoern)
model_runs <- map(.x = model_runs,
.f = ~ {
.x <- .x %>%
mutate(Model = as.character(Model),
Ninitial = as.factor(Ninitial),
Rep = as.numeric(Rep),
SeedRain = as.factor(SeedRain),
SpeciesID = as.character(SpeciesID),
Stage = as.factor(Stage),
Year = as.numeric(Year),
Biomass = as.numeric(Biomass))#,
#Productivity = as.numeric(Productivity))
.x <- .x %>%
mutate(Stage = recode(Stage,
assembly = "With seed inflow",
disassembly = "Without seed inflow"))
.x <- .x %>% filter(SeedRain %in% c(100))
.x$SeedRain <- droplevels(.x$SeedRain)
.x <- .x %>% filter(Year %in% c(100, 200))
as_tibble(.x)
})
model_traits <- list(adam_traits,
lindsay_traits,
IBC_grass_traits,
PPA_traits,
troll_traits,
bjoern_traits)
model_traits <- map(.x = model_traits,
.f = ~ .x %>% mutate(SpeciesID = as.character(SpeciesID)))
models <- map2(.x = model_runs,
.y = model_traits,
.f = ~ inner_join(.x, .y, by = c("SpeciesID")))
names(models) = map(.x = models,
.f = ~ unique(.x$Model))
setwd(base_dir)
adam <- adam %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
adam <- adam %>%
select(-Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
adam_traits <- adam_traits %>%
mutate(SpeciesID = as.factor(SpeciesID))
adam <- inner_join(adam, adam_traits, by = c("SpeciesID"))
adam
G1C1 <- randomForest_4conditions("G1C1",adam,1,meta)
G1C1
lindsay <- lindsay %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
lindsay <- lindsay %>%
select(-Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
lindsay_traits <- lindsay_traits %>%
mutate(SpeciesID = as.factor(SpeciesID))
lindsay <- inner_join(lindsay, lindsay_traits, by = c("SpeciesID"))
G2C1 <- randomForest_4conditions("G2C1",lindsay,1,meta)
G2C1
G2C1$importance
G1C1$importance
IBC_grass <- models$Grass3
IBC_grass_traits <- IBC_grass_traits %>% mutate(SpeciesID = as.character(SpeciesID))
IBC_grass <- inner_join(IBC_grass.NDD, IBC_grass_traits) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Biomass, LMR, MaxMass, Gmax, SLA, meanSpacerLength)
IBC_grass <- models$Grass3
IBC_grass_traits <- IBC_grass_traits %>% mutate(SpeciesID = as.character(SpeciesID))
IBC_grass <- inner_join(IBC_grass, IBC_grass_traits) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Biomass, LMR, MaxMass, Gmax, SLA, meanSpacerLength)
IBC_grass
G3C1 <- randomForest_4conditions("G3C1",IBC_grass,1,meta)
IBC_grass <- models$Grass3
IBC_grass_traits <- IBC_grass_traits %>% mutate(SpeciesID = as.character(SpeciesID))
IBC_grass <- inner_join(IBC_grass, IBC_grass_traits) %>%
select(Rep, Ninitial, SpeciesID, Year, Stage, Productivity, Biomass, LMR, MaxMass, Gmax, SLA, meanSpacerLength)
G3C1 <- randomForest_4conditions("G3C1",IBC_grass,1,meta)
G3C1
G3C1$importance
PPA <- models$Forest1 %>%
select(-Model, -SeedRain)
F1C1 <- randomForest_4conditions("F1C1",PPA,1,meta)
troll <- troll %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
troll <- troll %>%
select(-Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
troll_traits <- troll_traits %>%
mutate(SpeciesID = as.factor(SpeciesID))
troll <- inner_join(troll, troll_traits, by = c("SpeciesID"))
troll <- troll %>%
mutate(h_realmax = hmax * dmax / (dmax + ah)) %>%
select(-hmax, -ah)
F2C1 <- randomForest_4conditions("F2C1",troll,1,meta)
F2C1
F2C1$importance
G2C1$importance
F1C1$importance
bjoern <- bjoern %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
bjoern <- models$bjoern %>%#Dryland %>%
select(-Model, -SeedRain) %>%
mutate(SpeciesID = as.factor(SpeciesID))
bjoern_traits <- model_traits[[6]] %>%
mutate(SpeciesID = as.factor(SpeciesID))
bjoern <- inner_join(bjoern, bjoern_traits, by = c("SpeciesID"))
DC1 <- randomForest_4conditions("DC1",bjoern,1,meta)
bjoern <- readRDS("bjoern_Table1_averaged_smooth_NAreplaced0.rds") %>%
select(-Smooth)# %>%
#    select(-Productivity, -Smooth)# %>%
#    mutate(Model = "Dryland")
bjoern_traits <- readRDS("bjoern_Table2.rds") %>%
select(SpeciesID, maxSize, pLeaf, pRoot, pStorage)
bjoern <- bjoern %>%
filter(!is.na(Biomass)) %>%
filter(SeedRain %in% c(100))
bjoern <- bjoern %>%
mutate(Stage = recode(Stage,
assembly = "metacommunity",
disassembly = "isolation"))
bjoern <- bjoern %>%
ungroup() %>% # There shouldn't be groups anyways
mutate(Biomass = scales::rescale(Biomass,
to = c(0, 100)))
model_runs <- list(adam,
lindsay,
IBC_grass.NDD,
# IBC_grass.noNDD,
PPA,
troll,
bjoern)
model_runs <- map(.x = model_runs,
.f = ~ {
.x <- .x %>%
mutate(Model = as.character(Model),
Ninitial = as.factor(Ninitial),
Rep = as.numeric(Rep),
SeedRain = as.factor(SeedRain),
SpeciesID = as.character(SpeciesID),
Stage = as.factor(Stage),
Year = as.numeric(Year),
Biomass = as.numeric(Biomass))#,
#Productivity = as.numeric(Productivity))
.x <- .x %>%
mutate(Stage = recode(Stage,
assembly = "With seed inflow",
disassembly = "Without seed inflow"))
.x <- .x %>% filter(SeedRain %in% c(100))
.x$SeedRain <- droplevels(.x$SeedRain)
.x <- .x %>% filter(Year %in% c(100, 200))
as_tibble(.x)
})
model_traits <- list(adam_traits,
lindsay_traits,
IBC_grass_traits,
PPA_traits,
troll_traits,
bjoern_traits)
model_traits <- map(.x = model_traits,
.f = ~ .x %>% mutate(SpeciesID = as.character(SpeciesID)))
# -------------------------------------------------------------------------
# Formulation of model datasets
models <- map2(.x = model_runs,
.y = model_traits,
.f = ~ inner_join(.x, .y, by = c("SpeciesID")))
names(models) = map(.x = models,
.f = ~ unique(.x$Model))
setwd(base_dir)
model_runs <- list(#adam,
#lindsay,
#IBC_grass.NDD,
# IBC_grass.noNDD,
#PPA,
#troll,
bjoern)
model_runs <- map(.x = model_runs,
.f = ~ {
.x <- .x %>%
mutate(Model = as.character(Model),
Ninitial = as.factor(Ninitial),
Rep = as.numeric(Rep),
SeedRain = as.factor(SeedRain),
SpeciesID = as.character(SpeciesID),
Stage = as.factor(Stage),
Year = as.numeric(Year),
Biomass = as.numeric(Biomass))#,
#Productivity = as.numeric(Productivity))
.x <- .x %>%
mutate(Stage = recode(Stage,
assembly = "With seed inflow",
disassembly = "Without seed inflow"))
.x <- .x %>% filter(SeedRain %in% c(100))
.x$SeedRain <- droplevels(.x$SeedRain)
.x <- .x %>% filter(Year %in% c(100, 200))
as_tibble(.x)
})
model_traits <- list(#adam_traits,
#lindsay_traits,
#IBC_grass_traits,
#PPA_traits,
#troll_traits,
bjoern_traits)
model_traits <- map(.x = model_traits,
.f = ~ .x %>% mutate(SpeciesID = as.character(SpeciesID)))
# -------------------------------------------------------------------------
# Formulation of model datasets
models <- map2(.x = model_runs,
.y = model_traits,
.f = ~ inner_join(.x, .y, by = c("SpeciesID")))
names(models) = map(.x = models,
.f = ~ unique(.x$Model))
